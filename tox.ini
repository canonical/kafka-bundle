# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
application = kafka-bundle
src_path = {tox_root}
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib
all_path = {tox_root} {[vars]src_path} {[vars]tests_path}

[testenv]
allowlist_externals = 
    /bin/bash
    /var/lib/snapd/snap/bin/juju
    /var/lib/snapd/snap/bin/juju-wait
    poetry
whitelist_externals = poetry
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
deps =
    poetry

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install
    poetry export -f requirements.txt -o requirements.txt

    poetry install --only fmt
    poetry run ruff --fix {[vars]tests_path} --extend-exclude {tox_root}/tests/integration/bundle/app-charm/*.py
    poetry run black {[vars]tests_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only lint
    poetry run codespell {tox_root} \
        --skip {tox_root}/.git \
        --skip {tox_root}/.tox \
        --skip {tox_root}/build \
        --skip {tox_root}/lib \
        --skip {tox_root}/venv \
        --skip {tox_root}/tests/integration/bundle/app-charm/lib \
        --skip {tox_root}/.mypy_cache \
        --skip {tox_root}/poetry.lock \
        --skip {tox_root}/icon.svg

    poetry run ruff {[vars]tests_path} --extend-exclude {tox_root}/tests/integration/bundle/app-charm/*.py
    poetry run black --check --diff {[vars]tests_path}

[testenv:update_bundle]
allowlist_externals = ./update_bundle.py
description = Generate up-to-date bundles
deps =
    requests
    -r {tox_root}/requirements.txt
commands = 
    ./update_bundle.py releases/latest/kafka/bundle.yaml

[testenv:integration-bundle]
description = Run vm bundle integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    poetry run pytest -vv tests/integration/bundle/ --tb native --log-cli-level=INFO -s {posargs}

[testenv:integration-e2e]
description = Run vm e2e integration tests. Add `--tls` to specify tls tests. Add `--model=<MODEL> --no-deploy` to run on existing deployments.
pass_env =
    {[testenv]pass_env}
commands =
    poetry install --with integration
    poetry run pytest -vv tests/integration/e2e/test_e2e.py --tb native --ignore={[vars]tests_path} --log-cli-level=INFO -s {posargs}

[testenv:integration-e2e-tls]
description = Run vm e2e integration tests. Add `--tls` to specify tls tests. Add `--model=<MODEL> --no-deploy` to run on existing deployments.
pass_env =
    {[testenv]pass_env}
commands =
    poetry install --with integration
    poetry run pytest -vv tests/integration/e2e/test_e2e.py --tb native --ignore={[vars]tests_path} --log-cli-level=INFO -s {posargs} -- --tls


[testenv:integration-e2e-basic-flow]
description = Run vm e2e integration tests. Add `--tls` to specify tls tests. Add `--model=<MODEL> --no-deploy` to run on existing deployments.
pass_env =
    {[testenv]pass_env}
commands =
    poetry install --with integration
    poetry run pytest -vv tests/integration/e2e/test_basic_flow.py --tb native --ignore={[vars]tests_path} --log-cli-level=INFO -s {posargs}

[testenv:integration-e2e-password-rotation]
description = Run vm e2e integration tests. Add `--tls` to specify tls tests. Add `--model=<MODEL> --no-deploy` to run on existing deployments.
pass_env =
    {[testenv]pass_env}
commands =
    poetry install --with integration
    poetry run pytest -vv tests/integration/e2e/test_password_rotation.py --tb native --ignore={[vars]tests_path} --log-cli-level=INFO -s {posargs}
